trigger:
  branches:
    include: 
    - master
variables:
  buildConfiguration: 'Release'
  location: 'West US'
  acrHostName: 'capex21.azurecr.io'
  acrName: 'capex21'
  rgName: 'cape-rg'
  imageName: 'capex21'
  webAppName: 'capex2122'
  subscription: 'last'
  # webAppNamestg: 'capedockerstg'
  # webAppNameprd: 'capedockerprd'

stages:

# Build Stage
- stage: BuildAndTest
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: 'Ubuntu-latest'
    steps:
    
     # Create or update the ACR resource
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create Azure Container Registry'
      inputs:
        azureSubscription: '$(subscription)'
        resourceGroupName: '$(rgName)'
        location: $(location)
        csmFile: '$(System.DefaultWorkingDirectory)/**/containerRegistry-template.json'
        overrideParameters: '-registryName "$(acrName)" -registryLocation "$(location)" -registrySku standard'

# Create MySQL Database
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create MySql Database'
      inputs:
        azureSubscription: '$(subscription)'
        resourceGroupName: '$(rgName)'
        location: $(location)
        csmFile: '$(System.DefaultWorkingDirectory)/**/database-webapp-template.json'
        
# #Login to ACR
#     - task: Docker@2
#       displayName: Login to ACR
#       inputs:
#         command: login
#         containerRegistry: test

#Build java Artifact
    - task: Maven@3
      inputs:
        mavenPomFile: 'react-and-spring-data-rest/pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package -Dmaven.test.skip=true'

# # Build and push image to ACR
#     - task: Docker@2
#       displayName: Build and Push
#       inputs:
#         command: buildAndPush
#         repository: cape-demo
#         tags: latest
   # Build container image
    - task: Docker@1
      displayName: 'Build container image'
      inputs:
        azureSubscriptionEndpoint: '$(subscription)'
        azureContainerRegistry: '$(acrHostName)'
        imageName: '$(imageName):$(Build.BuildId)'
        useDefaultContext: false
        buildContext: '$(System.DefaultWorkingDirectory)'

    # Push container image
    - task: Docker@1
      displayName: 'Push container image'
      inputs:
        azureSubscriptionEndpoint: '$(subscription)'
        azureContainerRegistry: '$(acrHostName)'
        command: 'Push an image'
        imageName: '$(imageName):$(Build.BuildId)'




# #Destroy Function
# - stage: DestroyEnvironment
#   jobs:
#   - deployment: DestroyAll
#     environment: 'Destroy'
#     strategy:
#      runOnce:
#        deploy:
#          steps:
#           - task: AzureCLI@2
#             inputs:
#               azureSubscription: '$(subscription)'
#               scriptType: 'pscore'
#               scriptLocation: 'inlineScript'
#               inlineScript: 'az group delete --name $(rgName) --yes'
#               powerShellErrorActionPreference: 'silentlyContinue'
         